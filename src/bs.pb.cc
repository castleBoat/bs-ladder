// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bs.proto

#include "bs.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace bs {
class BsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BsRequest> _instance;
} _BsRequest_default_instance_;
class BsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BsResponse> _instance;
} _BsResponse_default_instance_;
}  // namespace bs
static void InitDefaultsscc_info_BsRequest_bs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bs::_BsRequest_default_instance_;
    new (ptr) ::bs::BsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bs::BsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BsRequest_bs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BsRequest_bs_2eproto}, {}};

static void InitDefaultsscc_info_BsResponse_bs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bs::_BsResponse_default_instance_;
    new (ptr) ::bs::BsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bs::BsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BsResponse_bs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BsResponse_bs_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bs_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_bs_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bs_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bs::BsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bs::BsRequest, passwd_),
  PROTOBUF_FIELD_OFFSET(::bs::BsRequest, atyp_),
  PROTOBUF_FIELD_OFFSET(::bs::BsRequest, target_addr_),
  PROTOBUF_FIELD_OFFSET(::bs::BsRequest, target_port_),
  PROTOBUF_FIELD_OFFSET(::bs::BsRequest, logid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bs::BsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bs::BsResponse, err_no_),
  PROTOBUF_FIELD_OFFSET(::bs::BsResponse, err_msg_),
  PROTOBUF_FIELD_OFFSET(::bs::BsResponse, atyp_),
  PROTOBUF_FIELD_OFFSET(::bs::BsResponse, target_addr_),
  PROTOBUF_FIELD_OFFSET(::bs::BsResponse, target_port_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::bs::BsRequest)},
  { 10, -1, sizeof(::bs::BsResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bs::_BsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bs::_BsResponse_default_instance_),
};

const char descriptor_table_protodef_bs_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\010bs.proto\022\002bs\"m\n\tBsRequest\022\016\n\006passwd\030\001 "
  "\001(\t\022\027\n\004atyp\030\002 \001(\0162\t.bs.AType\022\023\n\013target_a"
  "ddr\030\003 \001(\014\022\023\n\013target_port\030\004 \001(\005\022\r\n\005logid\030"
  "\006 \001(\004\"~\n\nBsResponse\022\034\n\006err_no\030\001 \001(\0162\014.bs"
  ".BsResErr\022\017\n\007err_msg\030\002 \001(\t\022\027\n\004atyp\030\003 \001(\016"
  "2\t.bs.AType\022\023\n\013target_addr\030\004 \001(\014\022\023\n\013targ"
  "et_port\030\005 \001(\005*\?\n\010BsResErr\022\n\n\006NO_ERR\020\000\022\017\n"
  "\013AUTH_FAILED\020\001\022\026\n\022TARGET_CONNECT_ERR\020\002*;"
  "\n\005AType\022\r\n\tATYP_NONE\020\000\022\t\n\005IP_V4\020\001\022\r\n\tDOM"
  "AINAME\020\003\022\t\n\005IP_V6\020\004b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bs_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bs_2eproto_sccs[2] = {
  &scc_info_BsRequest_bs_2eproto.base,
  &scc_info_BsResponse_bs_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bs_2eproto_once;
static bool descriptor_table_bs_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bs_2eproto = {
  &descriptor_table_bs_2eproto_initialized, descriptor_table_protodef_bs_2eproto, "bs.proto", 387,
  &descriptor_table_bs_2eproto_once, descriptor_table_bs_2eproto_sccs, descriptor_table_bs_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_bs_2eproto::offsets,
  file_level_metadata_bs_2eproto, 2, file_level_enum_descriptors_bs_2eproto, file_level_service_descriptors_bs_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bs_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bs_2eproto), true);
namespace bs {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BsResErr_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bs_2eproto);
  return file_level_enum_descriptors_bs_2eproto[0];
}
bool BsResErr_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bs_2eproto);
  return file_level_enum_descriptors_bs_2eproto[1];
}
bool AType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void BsRequest::InitAsDefaultInstance() {
}
class BsRequest::_Internal {
 public:
};

BsRequest::BsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bs.BsRequest)
}
BsRequest::BsRequest(const BsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  passwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_passwd().empty()) {
    passwd_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.passwd_);
  }
  target_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target_addr().empty()) {
    target_addr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.target_addr_);
  }
  ::memcpy(&atyp_, &from.atyp_,
    static_cast<size_t>(reinterpret_cast<char*>(&logid_) -
    reinterpret_cast<char*>(&atyp_)) + sizeof(logid_));
  // @@protoc_insertion_point(copy_constructor:bs.BsRequest)
}

void BsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BsRequest_bs_2eproto.base);
  passwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&atyp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logid_) -
      reinterpret_cast<char*>(&atyp_)) + sizeof(logid_));
}

BsRequest::~BsRequest() {
  // @@protoc_insertion_point(destructor:bs.BsRequest)
  SharedDtor();
}

void BsRequest::SharedDtor() {
  passwd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BsRequest& BsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BsRequest_bs_2eproto.base);
  return *internal_default_instance();
}


void BsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bs.BsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  passwd_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_addr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&atyp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logid_) -
      reinterpret_cast<char*>(&atyp_)) + sizeof(logid_));
  _internal_metadata_.Clear();
}

const char* BsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string passwd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_passwd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bs.BsRequest.passwd"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bs.AType atyp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_atyp(static_cast<::bs::AType>(val));
        } else goto handle_unusual;
        continue;
      // bytes target_addr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_target_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 target_port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          target_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 logid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          logid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bs.BsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string passwd = 1;
  if (this->passwd().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_passwd().data(), static_cast<int>(this->_internal_passwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bs.BsRequest.passwd");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_passwd(), target);
  }

  // .bs.AType atyp = 2;
  if (this->atyp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_atyp(), target);
  }

  // bytes target_addr = 3;
  if (this->target_addr().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_target_addr(), target);
  }

  // int32 target_port = 4;
  if (this->target_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_target_port(), target);
  }

  // uint64 logid = 6;
  if (this->logid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_logid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bs.BsRequest)
  return target;
}

size_t BsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bs.BsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string passwd = 1;
  if (this->passwd().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_passwd());
  }

  // bytes target_addr = 3;
  if (this->target_addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_target_addr());
  }

  // .bs.AType atyp = 2;
  if (this->atyp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_atyp());
  }

  // int32 target_port = 4;
  if (this->target_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_target_port());
  }

  // uint64 logid = 6;
  if (this->logid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_logid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bs.BsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bs.BsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bs.BsRequest)
    MergeFrom(*source);
  }
}

void BsRequest::MergeFrom(const BsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bs.BsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.passwd().size() > 0) {

    passwd_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.passwd_);
  }
  if (from.target_addr().size() > 0) {

    target_addr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.target_addr_);
  }
  if (from.atyp() != 0) {
    _internal_set_atyp(from._internal_atyp());
  }
  if (from.target_port() != 0) {
    _internal_set_target_port(from._internal_target_port());
  }
  if (from.logid() != 0) {
    _internal_set_logid(from._internal_logid());
  }
}

void BsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bs.BsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BsRequest::CopyFrom(const BsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bs.BsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BsRequest::IsInitialized() const {
  return true;
}

void BsRequest::InternalSwap(BsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  passwd_.Swap(&other->passwd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  target_addr_.Swap(&other->target_addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(atyp_, other->atyp_);
  swap(target_port_, other->target_port_);
  swap(logid_, other->logid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BsResponse::InitAsDefaultInstance() {
}
class BsResponse::_Internal {
 public:
};

BsResponse::BsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bs.BsResponse)
}
BsResponse::BsResponse(const BsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  err_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_err_msg().empty()) {
    err_msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.err_msg_);
  }
  target_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target_addr().empty()) {
    target_addr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.target_addr_);
  }
  ::memcpy(&err_no_, &from.err_no_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_port_) -
    reinterpret_cast<char*>(&err_no_)) + sizeof(target_port_));
  // @@protoc_insertion_point(copy_constructor:bs.BsResponse)
}

void BsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BsResponse_bs_2eproto.base);
  err_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&err_no_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_port_) -
      reinterpret_cast<char*>(&err_no_)) + sizeof(target_port_));
}

BsResponse::~BsResponse() {
  // @@protoc_insertion_point(destructor:bs.BsResponse)
  SharedDtor();
}

void BsResponse::SharedDtor() {
  err_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BsResponse& BsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BsResponse_bs_2eproto.base);
  return *internal_default_instance();
}


void BsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bs.BsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  err_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_addr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&err_no_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_port_) -
      reinterpret_cast<char*>(&err_no_)) + sizeof(target_port_));
  _internal_metadata_.Clear();
}

const char* BsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bs.BsResErr err_no = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_err_no(static_cast<::bs::BsResErr>(val));
        } else goto handle_unusual;
        continue;
      // string err_msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_err_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bs.BsResponse.err_msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bs.AType atyp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_atyp(static_cast<::bs::AType>(val));
        } else goto handle_unusual;
        continue;
      // bytes target_addr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_target_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 target_port = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          target_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bs.BsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bs.BsResErr err_no = 1;
  if (this->err_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_err_no(), target);
  }

  // string err_msg = 2;
  if (this->err_msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_err_msg().data(), static_cast<int>(this->_internal_err_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bs.BsResponse.err_msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_err_msg(), target);
  }

  // .bs.AType atyp = 3;
  if (this->atyp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_atyp(), target);
  }

  // bytes target_addr = 4;
  if (this->target_addr().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_target_addr(), target);
  }

  // int32 target_port = 5;
  if (this->target_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_target_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bs.BsResponse)
  return target;
}

size_t BsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bs.BsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string err_msg = 2;
  if (this->err_msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_err_msg());
  }

  // bytes target_addr = 4;
  if (this->target_addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_target_addr());
  }

  // .bs.BsResErr err_no = 1;
  if (this->err_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_err_no());
  }

  // .bs.AType atyp = 3;
  if (this->atyp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_atyp());
  }

  // int32 target_port = 5;
  if (this->target_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_target_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bs.BsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bs.BsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bs.BsResponse)
    MergeFrom(*source);
  }
}

void BsResponse::MergeFrom(const BsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bs.BsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.err_msg().size() > 0) {

    err_msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.err_msg_);
  }
  if (from.target_addr().size() > 0) {

    target_addr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.target_addr_);
  }
  if (from.err_no() != 0) {
    _internal_set_err_no(from._internal_err_no());
  }
  if (from.atyp() != 0) {
    _internal_set_atyp(from._internal_atyp());
  }
  if (from.target_port() != 0) {
    _internal_set_target_port(from._internal_target_port());
  }
}

void BsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bs.BsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BsResponse::CopyFrom(const BsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bs.BsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BsResponse::IsInitialized() const {
  return true;
}

void BsResponse::InternalSwap(BsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  err_msg_.Swap(&other->err_msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  target_addr_.Swap(&other->target_addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(err_no_, other->err_no_);
  swap(atyp_, other->atyp_);
  swap(target_port_, other->target_port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace bs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bs::BsRequest* Arena::CreateMaybeMessage< ::bs::BsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bs::BsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bs::BsResponse* Arena::CreateMaybeMessage< ::bs::BsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::bs::BsResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
